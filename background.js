const DEFAULT_SETTINGS={isEnabled:!1,mode:"classic",classic:{urls:"",minInterval:30,maxInterval:120,onlyPinned:!1},advanced:{individualUrls:[{id:Date.now(),url:"https://www.google.com",minInterval:30,maxInterval:120,isActive:!0,hasRandomPool:!1,randomPoolUrls:"",hasClickPath:!1,clickPathUrls:""}],pauseOnActive:!1,onlyPinned:!1,autoPin:!1,unpinOnDisable:!1,enableLimits:!1,maxActions:500,enableSchedule:!1,startTime:"09:00",endTime:"17:00",showStats:!1}};let countdownInterval;function normalizeUrl(t){if(!t)return"";try{const e=new URL(t);return`${e.hostname.replace(/^www\./,"")}${e.pathname.replace(/\/$/,"")}${e.search}`}catch(e){return t.replace(/^https?:\/\//,"").replace(/^www\./,"").replace(/\/$/,"")}}function findAndClickUrl(t){const e=t=>{if(!t)return"";try{const e=new URL(t);return`${e.hostname.replace(/^www\./,"")}${e.pathname.replace(/\/$/,"")}${e.search}`}catch(e){return t.replace(/^https?:\/\//,"").replace(/^www\./,"").replace(/\/$/,"")}},a=new Set(t.map(e)),r=Array.from(document.querySelectorAll("a")),n=[];for(const t of r){const r=new URL(t.getAttribute("href"),document.baseURI).href;a.has(e(r))&&n.push(t)}if(n.length>0){const t=n[Math.floor(Math.random()*n.length)];return t.click(),{success:!0,clicked:t.href}}return{success:!1,reason:"No matching URL link found on the page"}}async function startOrRestartAlarms(){await chrome.alarms.clearAll(),countdownInterval&&clearInterval(countdownInterval);const{settings:t}=await chrome.storage.local.get({settings:DEFAULT_SETTINGS});if(t.isEnabled){if(chrome.alarms.create("statsTimer",{periodInMinutes:1}),"classic"===t.mode){const{minInterval:e,maxInterval:a}=t.classic,r=Math.floor(Math.random()*(a-e+1))+e;chrome.alarms.create("classicRefreshAlarm",{delayInMinutes:r/60})}else if("advanced"===t.mode)for(const e of t.advanced.individualUrls)if(e.isActive&&e.url.trim()){const{minInterval:t,maxInterval:a}=e,r=Math.floor(Math.random()*(a-t+1))+t;chrome.alarms.create(`url-${e.id}`,{delayInMinutes:r/60})}await updateBadgeAndCountdown()}else await updateBadgeAndCountdown()}async function updateBadgeAndCountdown(){countdownInterval&&clearInterval(countdownInterval);const{settings:t}=await chrome.storage.local.get({settings:DEFAULT_SETTINGS});if(!t.isEnabled)return chrome.action.setBadgeText({text:""}),void await chrome.storage.local.set({countdown:null});const e=(await chrome.alarms.getAll()).filter((t=>t.name.startsWith("classic")||t.name.startsWith("url-")));if(0===e.length)return chrome.action.setBadgeText({text:"â€”"}),chrome.action.setBadgeBackgroundColor({color:"#64748b"}),void await chrome.storage.local.set({countdown:null});const a=e.reduce(((t,e)=>t.scheduledTime<e.scheduledTime?t:e));chrome.action.setBadgeBackgroundColor({color:"#7c3aed"}),countdownInterval=setInterval((()=>{const t=Math.round((a.scheduledTime-Date.now())/1e3);t<=0?(chrome.action.setBadgeText({text:"..."}),chrome.storage.local.set({countdown:0}),clearInterval(countdownInterval)):(chrome.action.setBadgeText({text:`${t}s`}),chrome.storage.local.set({countdown:t}))}),1e3)}async function handleClassicRefresh(){const{settings:t}=await chrome.storage.local.get({settings:DEFAULT_SETTINGS}),e=t.classic.urls.split("\n").map(normalizeUrl).filter(Boolean);if(0===e.length)return void await startOrRestartAlarms();let a=(await chrome.tabs.query({})).filter((t=>e.includes(normalizeUrl(t.url))));t.classic.onlyPinned&&(a=a.filter((t=>t.pinned)));for(const t of a)try{await chrome.tabs.reload(t.id)}catch(e){console.warn(`Could not reload tab ${t.id}.`)}a.length>0&&await updateStats(a.length),await startOrRestartAlarms()}async function handleIndividualRefresh(t){const e=parseInt(t.replace("url-",""));if(isNaN(e))return void await updateBadgeAndCountdown();const{settings:a}=await chrome.storage.local.get({settings:DEFAULT_SETTINGS}),{enableLimits:r,maxActions:n,enableSchedule:s,startTime:o,endTime:l,pauseOnActive:i,onlyPinned:c}=a.advanced;if(s){const t=new Date,e=t.getHours().toString().padStart(2,"0")+":"+t.getMinutes().toString().padStart(2,"0");if(e<o||e>l)return void await chrome.alarms.clearAll()}const d=(new Date).toISOString().slice(0,10),{stats:m={}}=await chrome.storage.local.get("stats"),u=m[d]||{totalActions:0};if(r&&u.totalActions>=n)return void await chrome.alarms.clearAll();const h=a.advanced.individualUrls.find((t=>t.id===e));if(!h||!h.isActive||!h.url.trim())return void await updateBadgeAndCountdown();const g=await chrome.tabs.query({}),w=normalizeUrl(h.url),f=h.randomPoolUrls.split("\n").filter(Boolean),v=h.clickPathUrls.split("\n").filter(Boolean),p=new Set([w]);h.hasRandomPool&&f.length>0&&f.forEach((t=>p.add(normalizeUrl(t))));let A=g.filter((t=>{if(!t.url)return!1;if(h.hasClickPath){const e=normalizeUrl(t.url);return e===w||v.map(normalizeUrl).includes(e)}return p.has(normalizeUrl(t.url))}));if(c&&(A=A.filter((t=>t.pinned))),i&&(A=A.filter((t=>!t.active&&!t.highlighted))),A.length>0){const t=A[0];let e=!1;try{if(h.hasClickPath){await new Promise((t=>setTimeout(t,2e3*Math.random()+500)));const a=await chrome.scripting.executeScript({target:{tabId:t.id},func:findAndClickUrl,args:[v]});a[0].result?.success||await chrome.tabs.update(t.id,{url:h.url}),e=!0}else if(h.hasRandomPool&&f.length>0){const a=normalizeUrl(t.url);let r=f.filter((t=>normalizeUrl(t)!==a));0===r.length&&(r=f);const n=r[Math.floor(Math.random()*r.length)];await chrome.tabs.update(t.id,{url:n}),e=!0}else await chrome.tabs.reload(t.id),e=!0;e&&await updateStats(1)}catch(e){console.error(`Error processing tab ${t.id}:`,e)}}const{minInterval:I,maxInterval:U}=h,T=Math.floor(Math.random()*(U-I+1))+I;chrome.alarms.create(t,{delayInMinutes:T/60}),await updateBadgeAndCountdown()}async function updateStats(t=0){if(0===t)return;const{stats:e={}}=await chrome.storage.local.get("stats"),a=(new Date).toISOString().slice(0,10),r=e[a]||{totalActions:0,activeUrls:0,activeTime:0};r.totalActions+=t,e[a]=r,await chrome.storage.local.set({stats:e})}chrome.runtime.onInstalled.addListener((()=>{chrome.storage.local.get("settings",(t=>{t.settings||chrome.storage.local.set({settings:DEFAULT_SETTINGS,stats:{}})})),startOrRestartAlarms()})),chrome.runtime.onStartup.addListener((()=>startOrRestartAlarms())),chrome.runtime.onMessage.addListener((t=>{"settingsUpdated"===t.action&&startOrRestartAlarms()})),chrome.alarms.onAlarm.addListener((async t=>{try{if("classicRefreshAlarm"===t.name)await handleClassicRefresh();else if(t.name.startsWith("url-"))await handleIndividualRefresh(t.name);else if("statsTimer"===t.name){const{settings:t,stats:e={}}=await chrome.storage.local.get(["settings","stats"]);if(!t.isEnabled)return;const a=(new Date).toISOString().slice(0,10),r=e[a]||{totalActions:0,activeUrls:0,activeTime:0};r.activeTime+=1,"advanced"===t.mode&&(r.activeUrls=t.advanced.individualUrls.filter((t=>t.isActive&&t.url.trim())).length),e[a]=r,await chrome.storage.local.set({stats:e})}}catch(t){console.error("An unhandled error occurred in the alarm listener:",t),await startOrRestartAlarms()}})),chrome.tabs.onUpdated.addListener((async(t,e,a)=>{if("complete"!==e.status||!a.url)return;const{settings:r}=await chrome.storage.local.get({settings:DEFAULT_SETTINGS});if(!r.isEnabled||"advanced"!==r.mode||!r.advanced.autoPin)return;const n=normalizeUrl(a.url);if(r.advanced.individualUrls.find((t=>t.isActive&&normalizeUrl(t.url)===n))&&!a.pinned)try{await chrome.tabs.update(t,{pinned:!0})}catch(e){console.warn(`Could not auto-pin tab ${t}.`)}}));